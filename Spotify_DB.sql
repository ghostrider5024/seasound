CREATE DATABASE spotify;

USE spotify;

CREATE TABLE ROLE (
	ROLE_ID INT NOT NULL AUTO_INCREMENT,
	ROLE_NAME NVARCHAR(255) NOT NULL UNIQUE,
	PRIMARY KEY (ROLE_ID)
);

CREATE TABLE USER (
	USER_ID INT NOT NULL AUTO_INCREMENT,
	FULLNAME NVARCHAR(255) NOT NULL,
	EMAIL VARCHAR(255) NOT NULL UNIQUE,
	PASSWORD VARCHAR(255) NOT NULL,
	IMAGE VARCHAR(255),
	ROLE_ID INT DEFAULT 2, -- 1 = Admin, 2 = User
	PRIMARY KEY (USER_ID)
);

CREATE TABLE PLAYLIST (
	PLAYLIST_ID INT NOT NULL AUTO_INCREMENT,
	TITLE NVARCHAR(255) NOT NULL,
    IMAGE VARCHAR(255),
	USER_ID INT,
	PRIMARY KEY (PLAYLIST_ID)
);

CREATE TABLE SONG (
	SONG_ID INT NOT NULL AUTO_INCREMENT,
	TITLE NVARCHAR(255) NOT NULL,
    ARTIST_NAMES NVARCHAR(255),
    IMAGE	VARCHAR(2000),
	SONG_URL VARCHAR(2000) NOT NULL,
    RELEASE_DATE TIMESTAMP DEFAULT NOW(),
	PRIMARY KEY (SONG_ID)
);

CREATE TABLE PLAYLIST_SONG (
	SONG_ID INT,
    PLAYLIST_ID INT,
	PRIMARY KEY (PLAYLIST_ID, SONG_ID)
);

CREATE TABLE ARTIST (
	ARTIST_ID INT NOT NULL AUTO_INCREMENT,
	FULLNAME NVARCHAR(255) NOT NULL,
    DESCRIPTION NVARCHAR(255),
	IMAGE VARCHAR(255),
    GENDER NVARCHAR(10) CHECK (GENDER = N'Nam' OR GENDER = N'Nữ'),
    PRIMARY KEY (ARTIST_ID)
);

CREATE TABLE ALBUM (
	ALBUM_ID INT NOT NULL AUTO_INCREMENT,
    TITLE NVARCHAR(255) NOT NULL,
	DESCRIPTION NVARCHAR(255),
    IMAGE VARCHAR(255) NOT NULL,
    RELEASE_DATE TIMESTAMP DEFAULT NOW(),
    TOTAL_LISTEN INT,
    PRIMARY KEY (ALBUM_ID)
);

CREATE TABLE ALBUM_SONG (
    ALBUM_ID INT,
    SONG_ID INT,
    PRIMARY KEY (ALBUM_ID, SONG_ID)
);

CREATE TABLE ALBUM_ARTIST (
	ALBUM_ID INT,
    ARTIST_ID INT,
    PRIMARY KEY (ALBUM_ID, ARTIST_ID)
);

CREATE TABLE FAVORITE(
	USER_ID INT,
    SONG_ID INT,
    PRIMARY KEY (USER_ID, SONG_ID)
);

-- FOREIGN KEY

-- USER
ALTER TABLE USER 
ADD CONSTRAINT FK_USER_ROLE
FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ROLE_ID);

-- PLAYLIST
ALTER TABLE PLAYLIST
ADD CONSTRAINT FK_PLAYLIST_USER
FOREIGN KEY (USER_ID) REFERENCES USER(USER_ID);

-- PLAYLIST_SONG
ALTER TABLE PLAYLIST_SONG
ADD CONSTRAINT FK_PLAYLIST_SONG_PLAYLIST
FOREIGN KEY (PLAYLIST_ID) REFERENCES PLAYLIST(PLAYLIST_ID) ON DELETE CASCADE;

ALTER TABLE PLAYLIST_SONG
ADD CONSTRAINT FK_PLAYLIST_SONG_SONG
FOREIGN KEY (SONG_ID) REFERENCES SONG(SONG_ID) ON DELETE CASCADE;

-- ALBUM_SONG
ALTER TABLE ALBUM_SONG
ADD CONSTRAINT FK_ALBUM_SONG_ALBUM
FOREIGN KEY (ALBUM_ID) REFERENCES ALBUM(ALBUM_ID) ON DELETE CASCADE;

ALTER TABLE ALBUM_SONG
ADD CONSTRAINT FK_ALBUM_SONG_SONG
FOREIGN KEY (SONG_ID) REFERENCES SONG(SONG_ID) ON DELETE CASCADE;

-- ALBUM_ARTIST
ALTER TABLE ALBUM_ARTIST
ADD CONSTRAINT FK_ALBUM_ARTIST_ALBUM
FOREIGN KEY (ALBUM_ID) REFERENCES ALBUM(ALBUM_ID);

ALTER TABLE ALBUM_ARTIST
ADD CONSTRAINT FK_ALBUM_ARTIST_ARTIST
FOREIGN KEY (ARTIST_ID) REFERENCES ARTIST(ARTIST_ID);

-- LIKE SONG
ALTER TABLE FAVORITE 
ADD CONSTRAINT FK_FAVORITE_USER
FOREIGN KEY (USER_ID) REFERENCES USER(USER_ID) ON DELETE CASCADE;

ALTER TABLE FAVORITE 
ADD CONSTRAINT FK_FAVORITE_SONG
FOREIGN KEY (SONG_ID) REFERENCES SONG(SONG_ID) ON DELETE CASCADE;

-- ALTER TABLE FAVORITE
-- DROP CONSTRAINT FK_FAVORITE_USER ;

-- INDEXING
CREATE INDEX IDX_SONG ON SONG (TITLE);

SELECT * FROM SONG WHERE TITLE LIKE '%Tu%';

-- END INDEXING
-- insert database

-- INSERT ROLE
SELECT * FROM ROLE;
INSERT INTO ROLE (ROLE_NAME) VALUES 
('Admin'),
('User');

-- INSERT USER
SELECT * FROM USER;
INSERT INTO USER (FULLNAME, EMAIL, PASSWORD, IMAGE, ROLE_ID) VALUES
('Thắng Trần', 'thang@gmail.com', '123456', 'https://static.vecteezy.com/system/resources/previews/001/840/612/original/picture-profile-icon-male-icon-human-or-people-sign-and-symbol-free-vector.jpg', 1);

INSERT INTO USER (FULLNAME, EMAIL, PASSWORD, IMAGE) VALUES
('Sơn Tung', 'st@gmail.com', '123456', 'https://static.vecteezy.com/system/resources/previews/001/840/612/original/picture-profile-icon-male-icon-human-or-people-sign-and-symbol-free-vector.jpg');


-- INSERT ALBUM
select * from album;
INSERT INTO ALBUM(TITLE, DESCRIPTION, IMAGE, RELEASE_DATE, TOTAL_LISTEN) VALUES
('Disco V', 'Âm hưởng Disco trở thành trào lưu của V-Pop ngày nay', 'https://photo-resize-zmp3.zmdcdn.me/w300_r1x1_jpeg/cover/5/6/4/2/564287350da9c16aa401ea18a3c9d2cd.jpg', NOW(), 10);

INSERT INTO ALBUM(TITLE, DESCRIPTION, IMAGE, RELEASE_DATE, TOTAL_LISTEN) VALUES
('2000s K-Pop', '2000s và những bản Hit K-Pop hay nhất', 'https://photo-resize-zmp3.zmdcdn.me/w300_r1x1_jpeg/cover/2/a/b/8/2ab897cbf80e6aed22a64f19e5ca029f.jpg', NOW(), 2);


select * from SONG;
-- INSERT SONG
INSERT INTO SONG(TITLE, ARTIST_NAMES, IMAGE, SONG_URL, RELEASE_DATE) VALUES
('Turn it up', 'Amee', 'https://photo-resize-zmp3.zmdcdn.me/w240_r1x1_webp/cover/0/4/e/5/04e561b01b9d88e709199091cba33d50.jpg', 'http://api.mp3.zing.vn/api/streaming/audio/ZU0DEWAW/320', NOW()),
('Đi đu đưa đi', 'Bích Phương', 'https://photo-resize-zmp3.zmdcdn.me/w240_r1x1_webp/cover/0/1/8/1/0181fd0a3b9bc53bfb48f7e5e3d9b080.jpg', 'http://api.mp3.zing.vn/api/streaming/audio/6IC6ODOF/320', NOW());

INSERT INTO SONG(TITLE, ARTIST_NAMES, IMAGE, SONG_URL, RELEASE_DATE) VALUES
('Sick Enough To Die', 'MC Mong, Mellow', 'https://photo-resize-zmp3.zmdcdn.me/w240_r1x1_jpeg/avatars/d/8/d817b457b10469fb62deb23890d7ec5b_1415074614.jpg', 'http://api.mp3.zing.vn/api/streaming/audio/ZWZBIIBD/320', NOW()),
('Haru Haru', 'BIGBANG', 'https://photo-resize-zmp3.zmdcdn.me/w240_r1x1_jpeg/avatars/3/1/31c0bc178874f507e52ccb8a84812da7_1449720766.jpg', 'http://api.mp3.zing.vn/api/streaming/audio/ZWZBWOE9/320', NOW());

-- INSERT ALBUM_SONG
SELECT * FROM ALBUM_SONG;
INSERT INTO ALBUM_SONG(ALBUM_ID, SONG_ID) VALUES
(1, 1),
(1, 2),
(1, 3);

INSERT INTO ALBUM_SONG(ALBUM_ID, SONG_ID) VALUES
(2, 4);

-- INSERT FAVORITE
INSERT INTO FAVORITE (USER_ID, SONG_ID) VALUES (1, 1);

-- INSERT PLAYLIST
SELECT * FROM PLAYLIST;

INSERT INTO PLAYLIST (TITLE, IMAGE, USER_ID) VALUES 
('LuonVuiTuoi', 'https://photo-resize-zmp3.zmdcdn.me/w600_r1x1_webp/cover/4/e/9/0/4e900a56a5dbf90e1f1cab539f68992f.jpg', '1'),
('Vinahey', 'https://photo-resize-zmp3.zmdcdn.me/w600_r1x1_webp/cover/2/4/5/3/24538985249cd4d3b324b4a4a09ad288.jpg', '1');

-- INSERT PLAYLIST_SONG 
SELECT * FROM PLAYLIST_SONG;

SELECT S.*, PLS.PLAYLIST_ID FROM SONG S
INNER JOIN PLAYLIST_SONG PLS ON PLS.SONG_ID = S.SONG_ID
INNER JOIN PLAYLIST P ON PLS.PLAYLIST_ID = P.PLAYLIST_ID
WHERE P.USER_ID = 1;


INSERT INTO PLAYLIST_SONG (PLAYLIST_ID, SONG_ID) VALUES
(1, 1),
(1, 2),
(2, 2),
(1, 3),
(1, 4);

-- END INSERT



-- delete from album where id = 5;
select * from album;
select * from song;
select * from album_song;

-- INSERT INTO ALBUM(TITLE, DESCRIPTION, IMAGE, RELEASE_DATE, TOTAL_LISTEN) VALUES
-- ('Nhạc mới', 'Nhạc mới siêu hay', 'https://photo-resize-zmp3.zmdcdn.me/w300_r1x1_jpeg/cover/5/6/4/2/564287350da9c16aa401ea18a3c9d2cd.jpg', NOW(), 10);


-- QUERY

SELECT * FROM ALBUM, ALBUM_SONG
WHERE ALBUM.ALBUM_ID = ALBUM_SONG.ALBUM_ID; 

SELECT * FROM SONG, ALBUM_SONG
WHERE SONG.SONG_ID = ALBUM_SONG.SONG_ID;

SELECT * FROM USER
WHERE EMAIL = 'thang@gmail.com'
AND PASSWORD = '123456';

SELECT U.*, R.ROLE_NAME FROM USER U
INNER JOIN ROLE R ON U.ROLE_ID = R.ROLE_ID;

SELECT * FROM FAVORITE F
INNER JOIN USER U ON F.USER_ID = U.USER_ID
WHERE F.SONG_ID = 1;


